// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/iyunix/go-internist/internal/config"
	"github.com/iyunix/go-internist/internal/handlers"
	"github.com/iyunix/go-internist/internal/repository/chat"
	"github.com/iyunix/go-internist/internal/repository/message"
	"github.com/iyunix/go-internist/internal/repository/user"
	"github.com/iyunix/go-internist/internal/repository/verification"
	"github.com/iyunix/go-internist/internal/services"
	"github.com/iyunix/go-internist/internal/services/admin_services"
	"github.com/iyunix/go-internist/internal/services/ai"
	"github.com/iyunix/go-internist/internal/services/sms"
	"github.com/iyunix/go-internist/internal/services/user_services"
	"gorm.io/gorm"
	"strconv"
	"time"
)

// Injectors from wire.go:

func InitializeApplication(cfg *config.Config, logger services.Logger, db *gorm.DB) (*Application, error) {
	userRepository := user.NewGormUserRepository(db)
	jwtSecret := ProvideJWTSecret(cfg)
	adminPhone := ProvideAdminPhone(cfg)
	userService := NewUserServiceWrapped(userRepository, jwtSecret, adminPhone, logger)
	authService := NewAuthServiceWrapped(userRepository, jwtSecret, adminPhone, logger)
	verificationRepository := verification.NewGormVerificationRepository(db)
	smsConfig := ProvideSMSConfig(cfg)
	provider := ProvideSMSProvider(smsConfig)
	smsService := services.NewSMSService(provider, logger)
	verificationService := user_services.NewVerificationService(userRepository, verificationRepository, smsService, authService, logger)
	user_servicesLogger := ProvideUserServicesLogger(logger)
	balanceService := user_services.NewBalanceService(userRepository, user_servicesLogger)
	authHandler := handlers.NewAuthHandler(userService, authService, verificationService, smsService, balanceService)
	chatRepository := chat.NewChatRepository(db)
	messageRepository := message.NewMessageRepository(db)
	aiConfig := ProvideAIConfig(cfg)
	aiProvider := ProvideAIProvider(aiConfig)
	aiService := services.NewAIService(aiProvider, logger)
	pineconeService, err := ProvidePineconeService(cfg, logger)
	if err != nil {
		return nil, err
	}
	int2 := ProvideRetrievalTopK(cfg)
	chatService, err := services.NewChatService(chatRepository, messageRepository, aiService, pineconeService, int2, cfg)
	if err != nil {
		return nil, err
	}
	chatHandler, err := handlers.NewChatHandler(userService, chatService)
	if err != nil {
		return nil, err
	}
	admin_servicesLogger := ProvideAdminServicesLogger(logger)
	adminService := admin_services.NewAdminService(userRepository, admin_servicesLogger)
	pageHandler := handlers.NewPageHandler(userService, chatService, adminService)
	adminHandler := handlers.NewAdminHandler(adminService)
	application := &Application{
		Config:              cfg,
		Logger:              logger,
		AuthHandler:         authHandler,
		ChatHandler:         chatHandler,
		PageHandler:         pageHandler,
		AdminHandler:        adminHandler,
		ChatService:         chatService,
		AIService:           aiService,
		PineconeService:     pineconeService,
		SMSService:          smsService,
		UserService:         userService,
		AuthService:         authService,
		VerificationService: verificationService,
		BalanceService:      balanceService,
		AdminService:        adminService,
		UserRepo:            userRepository,
	}
	return application, nil
}

// wire.go:

// Application aggregates all services and handlers
type Application struct {
	Config              *config.Config
	Logger              services.Logger
	AuthHandler         *handlers.AuthHandler
	ChatHandler         *handlers.ChatHandler
	PageHandler         *handlers.PageHandler
	AdminHandler        *handlers.AdminHandler
	ChatService         *services.ChatService
	AIService           *services.AIService
	PineconeService     *services.PineconeService
	SMSService          *services.SMSService
	UserService         *user_services.UserService
	AuthService         *user_services.AuthService
	VerificationService *user_services.VerificationService
	BalanceService      *user_services.BalanceService
	AdminService        *admin_services.AdminService
	UserRepo            user.UserRepository
}

// Wrapper types to avoid string ambiguity
type JWTSecret string

type AdminPhone string

// Provider functions
func ProvideConfig() (*config.Config, error) {
	return config.New()
}

func ProvideLogger() services.Logger {
	return services.NewLogger("go_internist")
}

func ProvideJWTSecret(cfg *config.Config) JWTSecret {
	return JWTSecret(cfg.JWTSecretKey)
}

func ProvideAdminPhone(cfg *config.Config) AdminPhone {
	return AdminPhone(cfg.AdminPhoneNumber)
}

// âœ… NEW: Add missing providers
func ProvideRetrievalTopK(cfg *config.Config) int {
	return cfg.RetrievalTopK
}

func ProvideUserServicesLogger(logger services.Logger) user_services.Logger {
	return logger
}

func ProvideAdminServicesLogger(logger services.Logger) admin_services.Logger {
	return logger
}

// Wrapped constructors for user services
func NewUserServiceWrapped(repo user.UserRepository, jwtSecret JWTSecret, adminPhone AdminPhone, logger services.Logger) *user_services.UserService {
	return user_services.NewUserService(repo, string(jwtSecret), string(adminPhone), logger)
}

func NewAuthServiceWrapped(repo user.UserRepository, jwtSecret JWTSecret, adminPhone AdminPhone, logger services.Logger) *user_services.AuthService {
	return user_services.NewAuthService(repo, string(jwtSecret), string(adminPhone), logger)
}

func ProvideAIConfig(cfg *config.Config) *ai.Config {
	aiConfig := ai.DefaultConfig()
	aiConfig.EmbeddingKey = cfg.AvalaiAPIKeyEmbedding
	aiConfig.LLMKey = cfg.JabirAPIKey
	aiConfig.EmbeddingBaseURL = "https://api.avalai.ir/v1"
	aiConfig.LLMBaseURL = "https://openai.jabirproject.org/v1"
	aiConfig.EmbeddingModel = cfg.EmbeddingModelName
	return aiConfig
}

func ProvideSMSConfig(cfg *config.Config) *sms.Config {
	templateID, _ := strconv.Atoi(cfg.SMSTemplateID)
	return &sms.Config{
		AccessKey:  cfg.SMSAccessKey,
		TemplateID: templateID,
		APIURL:     cfg.SMSAPIURL,
		Timeout:    30 * time.Second,
	}
}

func ProvideAIProvider(aiConfig *ai.Config) ai.AIProvider {
	return ai.NewOpenAIProvider(aiConfig)
}

func ProvideSMSProvider(smsConfig *sms.Config) sms.Provider {
	return sms.NewSMSIRProvider(smsConfig)
}

func ProvidePineconeService(cfg *config.Config, logger services.Logger) (*services.PineconeService, error) {
	return services.NewPineconeService(
		cfg.PineconeAPIKey,
		cfg.PineconeIndexHost,
		cfg.PineconeNamespace,
		logger,
	)
}
